// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using hltb;

#nullable disable

namespace hltb.Migrations
{
    [DbContext(typeof(TitleCounterContext))]
    partial class TitleCounterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("hltb.Models.Film", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly>("DateCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_completed")
                        .HasDefaultValueSql("'1900-01-01'::date");

                    b.Property<DateOnly>("DateRelease")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_release")
                        .HasDefaultValueSql("'1900-01-01'::date");

                    b.Property<string>("FixedTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)")
                        .HasColumnName("fixed_title")
                        .HasDefaultValueSql("'None'::character varying");

                    b.Property<string>("ImageUrl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("image_url")
                        .HasDefaultValueSql("'https://kitairu.net/images/noimage.png'::text");

                    b.Property<string>("LinkUrl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("link_url")
                        .HasDefaultValueSql("'https://howlongtobeat.com'::text");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("note");

                    b.Property<string>("RusTitle")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)")
                        .HasColumnName("rus_title")
                        .HasDefaultValueSql("'None'::character varying");

                    b.Property<long>("Score")
                        .HasColumnType("bigint")
                        .HasColumnName("score");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<long?>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("time")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("'None'::character varying");

                    b.HasKey("Id")
                        .HasName("films_pkey");

                    b.HasIndex("StatusId");

                    b.ToTable("films", (string)null);
                });

            modelBuilder.Entity("hltb.Models.Game", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly>("DateCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_completed")
                        .HasDefaultValueSql("'1900-01-01'::date");

                    b.Property<DateOnly>("DateRelease")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_release")
                        .HasDefaultValueSql("'1900-01-01'::date");

                    b.Property<string>("FixedTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)")
                        .HasColumnName("fixed_title")
                        .HasDefaultValueSql("'None'::character varying");

                    b.Property<string>("ImageUrl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("image_url")
                        .HasDefaultValueSql("'https://kitairu.net/images/noimage.png'::text");

                    b.Property<string>("LinkUrl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("link_url")
                        .HasDefaultValueSql("'https://howlongtobeat.com'::text");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("note");

                    b.Property<string>("Platform")
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)")
                        .HasColumnName("platform");

                    b.Property<long>("Score")
                        .HasColumnType("bigint")
                        .HasColumnName("score");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<long?>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("time")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("'None'::character varying");

                    b.HasKey("Id")
                        .HasName("games_pkey");

                    b.HasIndex("StatusId");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("hltb.Models.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("statuses_pkey");

                    b.ToTable("statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "completed"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "backlog"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "retired"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "in progress"
                        });
                });

            modelBuilder.Entity("hltb.Models.Film", b =>
                {
                    b.HasOne("hltb.Models.Status", "Status")
                        .WithMany("Films")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("status");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("hltb.Models.Game", b =>
                {
                    b.HasOne("hltb.Models.Status", "Status")
                        .WithMany("Games")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("status");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("hltb.Models.Status", b =>
                {
                    b.Navigation("Films");

                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
